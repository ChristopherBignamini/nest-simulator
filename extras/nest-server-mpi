#!/usr/bin/env python3

"""NEST Server with MPI support

Usage:
  nest-server-mpi --help
  mpirun --oversubscribe -np <np> nest-server-mpi [command] [options]

Commands:
  log         display the sever log stored in /tmp/nest-server.log
  status      display the status of NEST Server
  start       start a new instance of the server
  stop        stop a server instance running on <HOST>:<PORT>
  restart     restart (i.e. stop and start) a server on <HOST>:<PORT>

Options:
  --help      display usage information and exit
  -d          daemonize the server process
  -o          print all output to both the console and to the log
  -h <HOST>   use hostname/IP address <HOST> for the server [default: 127.0.0.1]
  -p <PORT>   use port <PORT> for opening the socket [default: 5000]
  -u <UID>    run the server under the user with ID <UID>

"""

from docopt import docopt
from mpi4py import MPI

#if __name__ == '__main__':
#    opt = docopt(__doc__)
#
#print(opt)

import time
import sys

import nest
from nest.server import run_mpi_app, serialize, do_exec

comm = MPI.COMM_WORLD.Clone()
rank = comm.Get_rank()

if rank == 0:
    print("==> Starting NEST Server Master on rank 0")
    run_mpi_app(comm)
else:
    print("==> Starting NEST Server Worker on rank {}".format(rank))
    while True:
        print("==> WORKER/{}: waiting for command bcast".format(rank))
        command = comm.bcast(None, root=0)
        print("==> WORKER/{} ({}): waiting for data bcast".format(rank, command))
        data = comm.bcast(None, root=0)
        print("==> WORKER/{} ({}): received data bcast, data={}".format(rank, command, data))
        if command == 'exec':
            args, kwargs = data
            response = do_exec(args, kwargs) # TODO: handle errors
            print("==> WORKER/{} (exec): sending reponse gather, data={}".format(rank, response))
            comm.gather(response, root=0)
        if command == 'call':
            call_name, args, kwargs = data
            call = getattr(nest, call_name)
            args, kwargs = serialize(call, args, kwargs)
            response = call(*args, **kwargs) # TODO: handle errors
            print("==> WORKER/{} (call): sending reponse gather, data={}".format(rank, response))
            comm.gather(nest.hl_api.serializable(response), root=0)

