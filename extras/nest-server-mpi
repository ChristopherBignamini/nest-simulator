#!/usr/bin/env python3

"""NEST Server with MPI support

Usage:
  nest-server-mpi --help
  mpirun --oversubscribe -np <np> nest-server-mpi [command] [options]

Commands:
  log         display the sever log stored in /tmp/nest-server.log
  status      display the status of NEST Server
  start       start a new instance of the server
  stop        stop a server instance running on <HOST>:<PORT>
  restart     restart (i.e. stop and start) a server on <HOST>:<PORT>

Options:
  --help      display usage information and exit
  -d          daemonize the server process
  -o          print all output to both the console and to the log
  -h <HOST>   use hostname/IP address <HOST> for the server [default: 127.0.0.1]
  -p <PORT>   use port <PORT> for opening the socket [default: 5000]
  -u <UID>    run the server under the user with ID <UID>

"""

from docopt import docopt
from mpi4py import MPI

#if __name__ == '__main__':
#    opt = docopt(__doc__)
#
#print(opt)

import time
import sys

import nest, nest.server


comm = MPI.COMM_WORLD.Clone()
rank = comm.Get_rank()

def log(call_name, msg):
    global rank
    print(f'==> WORKER {rank}/{time.time():.7f} ({call_name}): {msg}')

if rank == 0:
    print("==> Starting NEST Server Master on rank 0")
    nest.server.set_mpi_comm(comm)
    nest.server.run_mpi_app()
else:
    print(f"==> Starting NEST Server Worker on rank {rank}")
    nest.server.set_mpi_comm(comm)
    while True:
        log('spinwait', 'waiting for call bcast')
        call_name = comm.bcast(None, root=0)
        log(call_name, 'received call bcast, waiting for data bcast')
        data = comm.bcast(None, root=0)
        log(call_name, f'received data bcast, data={data}')
        args, kwargs = data
        if call_name == 'exec':
            response = nest.server.do_exec(args, kwargs)
        else:
            call = getattr(nest, call_name)
            args, kwargs = nest.server.NodeCollection(call, args, kwargs)
            log(call_name, f'local call, args={args}, kwargs={kwargs}')
            response = nest.hl_api.serializable(call(*args, **kwargs))
        log(call_name, f'sending reponse gather, data={response}')
        comm.gather(response, root=0)
